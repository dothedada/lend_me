CREATE TABLE authors (
  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name VARCHAR(120),
  bio VARCHAR(1000),
  url VARCHAR(120)
);

CREATE TABLE editorials (
  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name VARCHAR(120),
  url VARCHAR(120)
);

CREATE TABLE categories (
  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  category VARCHAR(120)
);

CREATE TABLE books (
  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  title VARCHAR(120),
  author_id INTEGER REFERENCES authors(id),
  editorial_id INTEGER REFERENCES editorials(id),
  year SMALLINT,
  category_id INTEGER REFERENCES categories(id),
  sinopsys VARCHAR(1000),
  url VARCHAR(120),
  image VARCHAR(120)
);

CREATE TABLE users (
  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name VARCHAR(120),
  email VARCHAR(120)
);

CREATE TABLE lends (
  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  book_id INTEGER NOT NULL REFERENCES books(id),
  from_id INTEGER NOT NULL REFERENCES users(id),
  to_id INTEGER NOT NULL REFERENCES users(id),
  date_taken DATE NOT NULL DEFAULT CURRENT_DATE,
  date_returned DATE
  CHECK (from_id != to_id),
  status VARCHAR(20) DEFAULT 'active' CHECK(status IN('active', 'returned'))
);

CREATE TABLE book_user (
  book_id INTEGER NOT NULL REFERENCES books(id),
  user_id INTEGER NOT NULL REFERENCES users(id),
  PRIMARY KEY (book_id, user_id)
);

CREATE TABLE friends (
  user_id INTEGER REFERENCES users(id),
  friend_id INTEGER REFERENCES users(id),
  PRIMARY KEY (user_id, friend_id),
  CHECK (user_id < friend_id)
)

CREATE TABLE friend_request (
  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  from_id INTEGER NOT NULL REFERENCES users(id),
  to_id INTEGER NOT NULL REFERENCES users(id),
  message VARCHAR(300) NOT NULL,
  CHECK (from_id != to_id),
  UNIQUE(from_id, to_id)
)
